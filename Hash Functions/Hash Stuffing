from Crypto.Util.number import bytes_to_long, long_to_bytes
import telnetlib
import json
from pkcs1 import emsa_pkcs1_v15
from sage.all import *
import fastecdsa
from fastecdsa.point import Point


HOST = "socket.cryptohack.org"
PORT = 13405
BLOCK_SIZE = 3

W = [0x6b17d1f2, 0xe12c4247, 0xf8bce6e5, 0x63a440f2, 0x77037d81, 0x2deb33a0, 0xf4a13945, 0xd898c296]
X = [0x4fe342e2, 0xfe1a7f9b, 0x8ee7eb4a, 0x7c0f9e16, 0x2bce3357, 0x6b315ece, 0xcbb64068, 0x37bf51f5]
Y = [0xc97445f4, 0x5cdef9f0, 0xd3e05e1e, 0x585fc297, 0x235b82b5, 0xbe8ff3ef, 0xca67c598, 0x52018192]
Z = [0xb28ef557, 0xba31dfcb, 0xdd21ac46, 0xe2a91e3c, 0x304f44cb, 0x87058ada, 0x2cb81515, 0x1e610046]


W_bytes = b''.join([x.to_bytes(4, 'big') for x in W])
X_bytes = b''.join([x.to_bytes(4, 'big') for x in X])
Y_bytes = b''.join([x.to_bytes(4, 'big') for x in Y])
Z_bytes = b''.join([x.to_bytes(4, 'big') for x in Z])


def readline():
    return tn.read_until(b"\n")


def json_recv():
    line = readline().decode()
    st = line[line.find('{'):]
    return json.loads(st)


def json_send(hsh):
    request = json.dumps(hsh).encode()
    tn.write(request)


tn = telnetlib.Telnet(HOST, PORT)
print(readline())


to_send = json.loads(json.dumps({"m1": m1.hex(), "m2": m2.hex()}))
json_send(to_send)
print(readline())
print(json_recv())


def pad(data):
    padding_len = (BLOCK_SIZE - len(data)) % BLOCK_SIZE
    return data + bytes([padding_len] * padding_len)


def blocks(data):
    return [data[i:(i + BLOCK_SIZE)] for i in range(0, len(data), BLOCK_SIZE)]


def xor(a, b):
    return bytes([x ^ y for x, y in zip(a, b)])


def rotate_left(data, x):
    x = x % BLOCK_SIZE
    return data[x:] + data[:x]


def rotate_right(data, x):
    x = x % BLOCK_SIZE
    return data[-x:] + data[:-x]


def scramble_block(block):
    for _ in range(40):
        block = xor(W_bytes, block)
        block = rotate_left(block, 6)
        block = xor(X_bytes, block)
        block = rotate_right(block, 17)
    return block


def unscramble_block(block):
    for _ in range(40):
        block = rotate_left(block, 17)
        block = xor(X_bytes, block)
        block = rotate_right(block, 6)
        block = xor(W_bytes, block)
    return block


def cryptohash(msg):
    initial_state = xor(Y_bytes, Z_bytes)
    msg_padded = pad(msg)  # Pad the message to a multiple of BLOCK_SIZE
    msg_blocks = blocks(msg_padded)  # Split message into blocks

    
    for i, b in enumerate(msg_blocks):
        mix_in = scramble_block(b)
        for _ in range(i):
            mix_in = rotate_right(mix_in, i + 11)
            mix_in = xor(mix_in, X_bytes)
            mix_in = rotate_left(mix_in, i + 6)
        initial_state = xor(initial_state, mix_in)
    
    return initial_state.hex()

def inv_cryptohash(initial_state, place):
    b = initial_state
    final_state = []

    for _ in range(place):
        b = rotate_right(b, place + 6)
        b = xor(b, X_bytes)
        b = rotate_left(b, place + 11)

    final_state += unscramble_block(b)

    return bytes(final_state)

m1 = bytes([0] * 32)
m2 = m1 + inv_cryptohash(bytes([0] * 32), 1)


print(cryptohash(m1))
print(cryptohash(m2))

Solution:crypto{Always_add_padding_even_if_its_a_whole_block!!!}
Explanation
1.The code establishes a Telnet connection to a server (socket.cryptohack.org on port 13405). It can transmit and receive data in JSON format thanks to this connection, which enables communication with the server.
2.The cryptohash() function takes a message, breaks it up into 32-byte blocks, and uses the pre-defined constants (W, X, Y, Z) to apply a number of modifications (such as scrambling and rotating).
3.It combines each block using cryptographic operations (XOR and rotation) to get a final hash after padding the message to ensure that its length is a multiple of 32 bytes.
4.This function could be used to "reverse-engineer" or find a message that would produce a particular hash.
5.This code is working with cryptography to create a custom hash function that manipulates data in blocks with certain transformations.
